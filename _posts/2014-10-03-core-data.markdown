---
layout: post
title:  "Core Data"
date:   2014-10-03 23:23:23
categories: cocoa
tags: data
published: true
---

Core Data is a framework available for iOS and Mac OS X. Core Data is not a database, it can save to sqlite but

## Model - View - Controller (MVC)
MVC is a software design pattern for user interfaces and helps simplify and separate concerns. MVC is part of the core architecture behind AppKit (Mac) and UIKit (iOS).

The model is a representation of your data, and CoreData helps manage the storage and retrieval of this data. It provides an abstract interface to several file storage types by default (XML,SQLite,Binary). It is possible to create custom data store types (NSAtomicStore).

Views are the visual component then a user sees and interacts with, these are configured with and represent the underlying data.

The controller handles all the real business logic, manipulation and validation of data. Controllers, for lack of a better word, control the App. They interact with the model and are responsible for coordinating the model and views.

## Data Modelling
Core Data has a data modelling tool with visual represents a data model. This is quite useful when trying to understand data relationships and overall structure. It is also used as an abstraction layer which can generically describe how data interacts without being forced to understand the underlying storage mechanism. Whilst I would recommend knowing and being able to use SQL, Core Data can do all of the low level querying for you.

Data models consist of entities which have properties and relations with other entities.
// image
Most relationships are two-way, however one-way relationships are possible using fetched properties. Fetched properties aren't well documented, so I've covered them a little further on.

Each entity in the data model has a class associated with it and you use this to interact with the data.
Whilst the model class files can contain custom model logic this is a bit of a grey area, conceptually logic should be handled in controllers. It is also quite easy to break nice CoreData features when overriding NSManagedObjectModel methods, and from experience would not recommend doing so, if it's avoidable.

The Core Data model editor can be used to generate the associated classes, but this quickly becomes tedious, especially when you add/remove properties and relationships from the data model.
Luckily there is an excellent way to automatic this process, not sure why XCode doesn't already do this.

### Managed Object File Generation
[MOGEN](http://rentzsch.github.com/mogenerator/) is a third-party script which is run at build time, it uses a file template to generate the class files from the data model and provides one file for machines and another for humans.

### Fetch Properties

Fetch properties provide one way relationships which work like queries using a fetch query and an entities properties to find matching entities. This can be used like an SQL query with a foreign key.

## Remote Data
Many Apps receive data from remote sources and then try and store this data for offline access. There are frameworks that provide this functionality such as [RESTKit](http://restkit.org/), but this assumes that the remote services is REST based and provides valid data (parseable). As horrible as that sounds it is often the case when you are not in control of the remote service. Rather than forgo using CoreData for your data store or hacking together your own wrapper around CoreData, iOS 5 provides NSIncrementalStore.

### NSIncrementalStore
> NSIncrementalStore is an abstract superclass defining the API through which Core Data communicates with a store.

Suffice to say this is a huge leg up when creating a simple API wrapper for any web service. It lets you define the queries and fetch the data and it handles storing, caching and other very helpful things.

If your interested in NSIncrementalStore check out [NSIncrementalStore â€“ The future of web services in iOS / Mac OS X](http://sealedabstract.com/code/nsincrementalstore-the-future-of-web-services-in-ios-mac-os-x/) which is more in depth guide and code snippets, and of course the Core Data [Apple Documentation](https://developer.apple.com/library/mac/#documentation/CoreData/Reference/NSIncrementalStore_Class/Reference/NSIncrementalStore.html).

## Using your data

Fetching

### Active Record
ActiveRecord is a [Ruby on Rails](http://rubyonrails.org/) object relation mapping pattern. We can make use of this pattern in objective-C using [MagicalRecord](https://github.com/magicalpanda/MagicalRecord). MagicalRecord provides categories for NSManagedObject which add many helpful methods for finding, sorting and more.

It's best to look at an example to see why the ActiveRecord pattern is useful.

The usual way

	NSLog(@"Hello world");
{:lang=objective-c html_use_syntax=true}

The magical way

	NSLog(@"Hello world");
{:lang=objective-c html_use_syntax=true}

### NSFetchedResultsController

## Data Migration

## Threading

## Conclusion
